substitutions:
  name: "utility-room"
  friendly_name: Utility Room
#---------------------------------------------------------------------------------------------------
esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: recommended
#---------------------------------------------------------------------------------------------------
esp8266:
  board: esp12e
  early_pin_init: false
  framework: 
    version: recommended
#---------------------------------------------------------------------------------------------------
# Enable logging
logger:
#  baud_rate: 0
  logs:
    component: ERROR
#---------------------------------------------------------------------------------------------------
# Enable Home Assistant API
api:
  encryption: 
    key: !secret haapi_key
#---------------------------------------------------------------------------------------------------
# Allow Over-The-Air updates
ota:
  - platform: esphome
    password: !secret ota_password
#---------------------------------------------------------------------------------------------------
# Allow provisioning Wi-Fi via serial
#improv_serial:
#---------------------------------------------------------------------------------------------------
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  fast_connect: off

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendly_name}"
    password: !secret haapi_password
#---------------------------------------------------------------------------------------------------
# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
#captive_portal:
#---------------------------------------------------------------------------------------------------
dashboard_import:
  package_import_url: github://esphome/example-configs/esphome-web/esp8266.yaml@main
  import_full_config: true
#---------------------------------------------------------------------------------------------------
# Creates a simple web server on the node that can be accessed through any browser
web_server:
#---------------------------------------------------------------------------------------------------
time:
  - platform: homeassistant
    id: esptime
#---------------------------------------------------------------------------------------------------
switch:
  - platform: restart
    name: "${friendly_name} Restart"
#---------------------------------------------------------------------------------------------------
text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${friendly_name} IP
    ssid:
      name: ${friendly_name} SSID
    mac_address:
      name: ${friendly_name} Mac
#---------------------------------------------------------------------------------------------------
spi:
  miso_pin: GPIO14
  clk_pin: GPIO12
#---------------------------------------------------------------------------------------------------
sensor:
  - platform: wifi_signal
    name: "${friendly_name} Signal Strength"
    update_interval: 60s
#--------------------------------------------------
  - platform: dht
    pin: GPIO10
    update_interval: 60s
    temperature:
      name: "${friendly_name} Temperature"
      id: UtilityRoomTemp
      accuracy_decimals: 1
      unit_of_measurement: "°F"
      filters:
      - lambda: return x * (9.0/5.0) + 32.0;
#      - sliding_window_moving_average:
#          window_size: 12
#          send_every: 12
    humidity:
      name: "${friendly_name} Humidity"
      id: UtilityRoomHumidity
      accuracy_decimals: 1
      unit_of_measurement: "%"
      filters:
#      - sliding_window_moving_average:
#          window_size: 12
#          send_every: 12
#--------------------------------------------------
#  - platform: max6675
#    name: "Freezer Temperature °F"
#    id: FreezerTempF
#    cs_pin: GPIO15
#    update_interval: 60s
#    unit_of_measurement: "°F"
#    accuracy_decimals: 1
#    filters:
#    - lambda: return x * (9.0/5.0) + 32.0;
#    - sliding_window_moving_average:
#        window_size: 12
#        send_every: 12
#--------------------------------------------------
  # Template sensor to convert to Fahrenheit
#  - platform: template
#    name: "Freezer Temperature °F"
#    id: FreezerTempF
#    unit_of_measurement: "°F"
#    accuracy_decimals: 1
#    lambda: return id(FreezerTempC).state * (9.0/5.0) + 32.0;
#    update_interval: 60s # Or match your source sensor's update_interval
#--------------------------------------------------
  # Template sensor to calculate the difference
#  - platform: template
#    name: "Temperature Delta °F"
#    id: TempDeltaF
#    device_class: temperature
#    unit_of_measurement: "°F" # Change to the appropriate unit
#    icon: "mdi:calculator"       # Choose an icon if desired
#    accuracy_decimals: 2         # Adjust as needed
#    lambda: |-
#      // Check if both sensors have valid states before calculating
#      if (id(FreezerTempF).has_state() && id(UtilityRoomTemp).has_state()) {
#        return (id(FreezerTempF).state * (9.0/5.0) + 32.0) - (id(UtilityRoomTemp).state * (9.0/5.0) + 32.0);
#      } else {
#        // Return NAN (Not a Number) if any sensor is unavailable
#        // This will make the difference sensor show as 'unknown' or 'unavailable'
#        return NAN;
#      }
#    update_interval: 60s # Update every 60 seconds, adjust as needed
#--------------------------------------------------
  # Template sensor to calculate the difference
#  - platform: template
#    name: "Temperature Delta °C"
#    id: TempDeltaC
#    device_class: temperature
#    unit_of_measurement: "°C" # Change to the appropriate unit
#    icon: "mdi:calculator"       # Choose an icon if desired
#    accuracy_decimals: 2         # Adjust as needed
#    lambda: |-
#      // Check if both sensors have valid states before calculating
#      if (id(FreezerTempC).has_state() && id(UtilityRoomTemp).has_state()) {
#        return id(FreezerTempC).state - id(UtilityRoomTemp).state;
#      } else {
#        // Return NAN (Not a Number) if any sensor is unavailable
#        // This will make the difference sensor show as 'unknown' or 'unavailable'
#        return NAN;
#      }
#    update_interval: 60s # Update every 60 seconds, adjust as needed
#---------------------------------------------------------------------------------------------------
